class Solution {
public:
    
    bool safe( vector<string>&board , int n , int col ,int row){
        int duprow=row;
        int dupcol=col;
        
        while(row>=0 and col>=0){
            if(board[row][col]=='Q'){
                return false;
            }
            row--;
            col--;
        }
        row=duprow;
        col=dupcol;
        
        while(col>=0){
            if(board[row][col]=='Q'){
                return false;
            }
            col--;
        }
        
        row=duprow;
        col=dupcol;
        
        while(row<n and col>=0){
            if(board[row][col]=='Q'){
                return false;
            }
            row++;
            col--;
        }
        return true;
    }
    
    void solve(vector<vector<string>>&ans , vector<string>&board , int n , int col){
        if(col==n){
            ans.push_back(board);
            return;
        }
        
        for(int row=0;row<n;row++){
            if(safe( board ,n ,col ,row)){
                board[row][col]='Q';
                solve(ans , board , n , col+1);
                board[row][col]='.';
            }
        }
        //return ans;
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board;
        string s(n,'.');
        for(int i=0;i<n;i++){
            board.push_back(s);
        }
        solve(ans , board , n , 0);
        
        return ans;
    }
};
