#include <bits/stdc++.h> 

int merge(long long *arr , long long int temp[], long long int l ,long long  int r, long long int mid){
    long long int i =l,j=mid,k=l;
    long long int inversions=0;
    
    while((i<=mid-1 and j<=r)){
        if(arr[i]<=arr[j]){
            temp[k++]=arr[i++];
        }else{
            temp[k++]=arr[j++];
            inversions = inversions + (mid-i);
        }
    }
    while(i<=mid-1){
        temp[k++]=arr[i++];
    }
    while(j<=r){
        temp[k++]=arr[j++];
    }
    
    for(long long int i=l;i<=r;i++){
        arr[i]=temp[i];
    }
    
    return inversions;
}

long long int mergesort(long long *arr , long long int temp[] , long int l , long long int r){
    int inversions=0;
    if(l<r){
        long long int mid=(l+r)/2;
       inversions+= mergesort(arr,temp,l,mid);
        inversions+= mergesort(arr,temp,mid+1,r);
        inversions+= merge(arr,temp,l,r ,mid+1);
    }   
    return inversions;
}

long long getInversions(long long *arr, long long int n){
    // Write your code here.
    long long int l=0 , r=n-1;
    long long int temp[n];
    long long int inversions = mergesort(arr, temp ,l , r);
    return inversions;
}
